# Generated by Grammarinator 0.0.post365+g7112a41.d20241128

from math import inf
from grammarinator.runtime import *

class TexasHoldemGenerator(Generator):


    def game(self, parent=None):
        with UnparserRuleContext(self, 'game', parent) as rule:
            current = rule.current
            self._reserve(16, self.player1Hand, parent=current)
            self._reserve(15, self.SPACE, parent=current)
            self._reserve(11, self.player2Hand, parent=current)
            self._reserve(10, self.SPACE, parent=current)
            self.board(parent=current)
            return current

    def player1Hand(self, parent=None):
        with UnparserRuleContext(self, 'player1Hand', parent) as rule:
            current = rule.current
            self._reserve(2, self.card, parent=current)
            self.card(parent=current)
            return current

    def player2Hand(self, parent=None):
        with UnparserRuleContext(self, 'player2Hand', parent) as rule:
            current = rule.current
            self._reserve(2, self.card, parent=current)
            self.card(parent=current)
            return current

    def board(self, parent=None):
        with UnparserRuleContext(self, 'board', parent) as rule:
            current = rule.current
            self._reserve(8, self.card, parent=current)
            self._reserve(6, self.card, parent=current)
            self._reserve(4, self.card, parent=current)
            self._reserve(2, self.card, parent=current)
            self.card(parent=current)
            return current

    def card(self, parent=None):
        with UnparserRuleContext(self, 'card', parent) as rule:
            current = rule.current
            self._reserve(1, self.rank, parent=current)
            self.suit(parent=current)
            return current

    def rank(self, parent=None):
        with UnparserRuleContext(self, 'rank', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, TexasHoldemGenerator._alt_sizes[0], 0, TexasHoldemGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.T__0, self.T__1, self.T__2, self.T__3, self.T__4, self.T__5, self.T__6, self.T__7, self.T__8, self.T__9, self.T__10, self.T__11, self.T__12][alt0()](parent=current)
            current = rule.current
            return current

    def suit(self, parent=None):
        with UnparserRuleContext(self, 'suit', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, TexasHoldemGenerator._alt_sizes[1], 0, TexasHoldemGenerator._alt_conds[1]) as alt0:
                current = rule.current
                [self.T__13, self.T__14, self.T__15, self.T__16][alt0()](parent=current)
            current = rule.current
            return current

    def SPACE(self, parent=None):
        with UnlexerRuleContext(self, 'SPACE', parent) as rule:
            current = rule.current
            current.src += ' '
            return current

    def T__0(self, parent=None):
        with UnlexerRuleContext(self, 'T__0', parent) as rule:
            current = rule.current
            current.src += '2'
            return current

    def T__1(self, parent=None):
        with UnlexerRuleContext(self, 'T__1', parent) as rule:
            current = rule.current
            current.src += '3'
            return current

    def T__2(self, parent=None):
        with UnlexerRuleContext(self, 'T__2', parent) as rule:
            current = rule.current
            current.src += '4'
            return current

    def T__3(self, parent=None):
        with UnlexerRuleContext(self, 'T__3', parent) as rule:
            current = rule.current
            current.src += '5'
            return current

    def T__4(self, parent=None):
        with UnlexerRuleContext(self, 'T__4', parent) as rule:
            current = rule.current
            current.src += '6'
            return current

    def T__5(self, parent=None):
        with UnlexerRuleContext(self, 'T__5', parent) as rule:
            current = rule.current
            current.src += '7'
            return current

    def T__6(self, parent=None):
        with UnlexerRuleContext(self, 'T__6', parent) as rule:
            current = rule.current
            current.src += '8'
            return current

    def T__7(self, parent=None):
        with UnlexerRuleContext(self, 'T__7', parent) as rule:
            current = rule.current
            current.src += '9'
            return current

    def T__8(self, parent=None):
        with UnlexerRuleContext(self, 'T__8', parent) as rule:
            current = rule.current
            current.src += 'T'
            return current

    def T__9(self, parent=None):
        with UnlexerRuleContext(self, 'T__9', parent) as rule:
            current = rule.current
            current.src += 'J'
            return current

    def T__10(self, parent=None):
        with UnlexerRuleContext(self, 'T__10', parent) as rule:
            current = rule.current
            current.src += 'Q'
            return current

    def T__11(self, parent=None):
        with UnlexerRuleContext(self, 'T__11', parent) as rule:
            current = rule.current
            current.src += 'K'
            return current

    def T__12(self, parent=None):
        with UnlexerRuleContext(self, 'T__12', parent) as rule:
            current = rule.current
            current.src += 'A'
            return current

    def T__13(self, parent=None):
        with UnlexerRuleContext(self, 'T__13', parent) as rule:
            current = rule.current
            current.src += 'h'
            return current

    def T__14(self, parent=None):
        with UnlexerRuleContext(self, 'T__14', parent) as rule:
            current = rule.current
            current.src += 'd'
            return current

    def T__15(self, parent=None):
        with UnlexerRuleContext(self, 'T__15', parent) as rule:
            current = rule.current
            current.src += 'c'
            return current

    def T__16(self, parent=None):
        with UnlexerRuleContext(self, 'T__16', parent) as rule:
            current = rule.current
            current.src += 's'
            return current


    _default_rule = game

    _immutable_rules = ('SPACE', 'T__0', 'T__1', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 'T__9')

    _rule_sizes = {
        'game': RuleSize(4, 20),
        'player1Hand': RuleSize(3, 4),
        'player2Hand': RuleSize(3, 4),
        'board': RuleSize(3, 10),
        'card': RuleSize(2, 2),
        'rank': RuleSize(1, 1),
        'suit': RuleSize(1, 1),
        'SPACE': RuleSize(0, 0),
        'T__0': RuleSize(0, 0),
        'T__1': RuleSize(0, 0),
        'T__2': RuleSize(0, 0),
        'T__3': RuleSize(0, 0),
        'T__4': RuleSize(0, 0),
        'T__5': RuleSize(0, 0),
        'T__6': RuleSize(0, 0),
        'T__7': RuleSize(0, 0),
        'T__8': RuleSize(0, 0),
        'T__9': RuleSize(0, 0),
        'T__10': RuleSize(0, 0),
        'T__11': RuleSize(0, 0),
        'T__12': RuleSize(0, 0),
        'T__13': RuleSize(0, 0),
        'T__14': RuleSize(0, 0),
        'T__15': RuleSize(0, 0),
        'T__16': RuleSize(0, 0),
    }

    _alt_sizes = (
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 0
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 1
    )

    _alt_conds = (
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 0
        (1, 1, 1, 1),  # 1
    )

    _quant_sizes = (
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
    )
