# Generated by Grammarinator 0.0.post358+g87db106.d20241126

from math import inf
from grammarinator.runtime import *

class CalculatorGenerator(Generator):


    def equation(self, parent=None):
        with UnparserRuleContext(self, 'equation', parent) as rule:
            current = rule.current
            self.expr(parent=current)
            return current

    def expr(self, parent=None):
        with UnparserRuleContext(self, 'expr', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, CalculatorGenerator._alt_sizes[1], 0, CalculatorGenerator._alt_conds[1]) as alt0:
                current = rule.current
                [self.expr_MULOPGRP, self.expr_ADDOPGRP, self.expr_MULOPGRP1, self.expr_ADDOPGRP2, self.expr_DOUBLE][alt0()](parent=current)
            current = rule.current
            return current

    def uminus(self, parent=None):
        with UnparserRuleContext(self, 'uminus', parent) as rule:
            current = rule.current
            self._reserve(3, self.T__0, parent=current)
            self._reserve(2, self.T__1, parent=current)
            self._reserve(1, self.NUMBER, parent=current)
            self.T__2(parent=current)
            return current

    def addop(self, parent=None):
        with UnparserRuleContext(self, 'addop', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, CalculatorGenerator._alt_sizes[2], 0, CalculatorGenerator._alt_conds[2]) as alt0:
                current = rule.current
                [self.T__3, self.T__1][alt0()](parent=current)
            current = rule.current
            return current

    def mulop(self, parent=None):
        with UnparserRuleContext(self, 'mulop', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, CalculatorGenerator._alt_sizes[3], 0, CalculatorGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.T__4, self.T__5, self.T__6, self.T__7][alt0()](parent=current)
            current = rule.current
            return current

    def atom(self, parent=None):
        with UnparserRuleContext(self, 'atom', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, CalculatorGenerator._alt_sizes[4], 0, CalculatorGenerator._alt_conds[2]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self.NUMBER(parent=current)
                elif choice0 == 1:
                    self._reserve(2, self.T__0, parent=current)
                    self._reserve(1, self.expr, parent=current)
                    self.T__2(parent=current)
            current = rule.current
            return current

    def NUMBER(self, parent=None):
        with UnlexerRuleContext(self, 'NUMBER', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, CalculatorGenerator._alt_sizes[0], 0, CalculatorGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += '0'
                elif choice0 == 1:
                    current.src += self._model.charset(current, 0, CalculatorGenerator._charsets[1])
                    with QuantifierContext(rule, 0, 0, inf, CalculatorGenerator._quant_sizes[0], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 1, CalculatorGenerator._charsets[2])
                    current = rule.current
                elif choice0 == 2:
                    current.src += self._model.charset(current, 2, CalculatorGenerator._charsets[1])
                    with QuantifierContext(rule, 1, 0, inf, CalculatorGenerator._quant_sizes[0], 0) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 3, CalculatorGenerator._charsets[2])
                    current = rule.current
                    current.src += '.'
                    with QuantifierContext(rule, 2, 1, inf, CalculatorGenerator._quant_sizes[0], 0) as quant2:
                        while quant2():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 4, CalculatorGenerator._charsets[2])
                    current = rule.current
                elif choice0 == 3:
                    current.src += '0'
                    current.src += '.'
                    with QuantifierContext(rule, 3, 1, inf, CalculatorGenerator._quant_sizes[0], 0) as quant3:
                        while quant3():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 5, CalculatorGenerator._charsets[2])
                    current = rule.current
            current = rule.current
            return current

    def WS(self, parent=None):
        with UnlexerRuleContext(self, 'WS', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, CalculatorGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, CalculatorGenerator._charsets[3])
            current = rule.current
            return current

    def expr_MULOPGRP(self, parent=None):
        with UnparserRuleContext(self, 'expr_MULOPGRP', parent) as rule:
            current = rule.current
            self._reserve(2, self.expr, parent=current)
            self._reserve(1, self.mulop, parent=current)
            self.expr(parent=current)
            return current

    def expr_ADDOPGRP(self, parent=None):
        with UnparserRuleContext(self, 'expr_ADDOPGRP', parent) as rule:
            current = rule.current
            self._reserve(2, self.expr, parent=current)
            self._reserve(1, self.addop, parent=current)
            self.expr(parent=current)
            return current

    def expr_MULOPGRP1(self, parent=None):
        with UnparserRuleContext(self, 'expr_MULOPGRP1', parent) as rule:
            current = rule.current
            self._reserve(5, self.expr, parent=current)
            self._reserve(4, self.mulop, parent=current)
            self.uminus(parent=current)
            return current

    def expr_ADDOPGRP2(self, parent=None):
        with UnparserRuleContext(self, 'expr_ADDOPGRP2', parent) as rule:
            current = rule.current
            self._reserve(5, self.expr, parent=current)
            self._reserve(4, self.addop, parent=current)
            self.uminus(parent=current)
            return current

    def expr_DOUBLE(self, parent=None):
        with UnparserRuleContext(self, 'expr_DOUBLE', parent) as rule:
            current = rule.current
            self.atom(parent=current)
            return current

    def T__0(self, parent=None):
        with UnlexerRuleContext(self, 'T__0', parent) as rule:
            current = rule.current
            current.src += '('
            return current

    def T__1(self, parent=None):
        with UnlexerRuleContext(self, 'T__1', parent) as rule:
            current = rule.current
            current.src += '-'
            return current

    def T__2(self, parent=None):
        with UnlexerRuleContext(self, 'T__2', parent) as rule:
            current = rule.current
            current.src += ')'
            return current

    def T__3(self, parent=None):
        with UnlexerRuleContext(self, 'T__3', parent) as rule:
            current = rule.current
            current.src += '+'
            return current

    def T__4(self, parent=None):
        with UnlexerRuleContext(self, 'T__4', parent) as rule:
            current = rule.current
            current.src += '*'
            return current

    def T__5(self, parent=None):
        with UnlexerRuleContext(self, 'T__5', parent) as rule:
            current = rule.current
            current.src += '/'
            return current

    def T__6(self, parent=None):
        with UnlexerRuleContext(self, 'T__6', parent) as rule:
            current = rule.current
            current.src += '%'
            return current

    def T__7(self, parent=None):
        with UnlexerRuleContext(self, 'T__7', parent) as rule:
            current = rule.current
            current.src += '^'
            return current


    _default_rule = equation

    _immutable_rules = ('T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7')

    _rule_sizes = {
        'equation': RuleSize(4, 1),
        'expr': RuleSize(3, 1),
        'uminus': RuleSize(1, 4),
        'addop': RuleSize(1, 1),
        'mulop': RuleSize(1, 1),
        'atom': RuleSize(1, 1),
        'NUMBER': RuleSize(0, 0),
        'WS': RuleSize(0, 0),
        'expr_MULOPGRP': RuleSize(4, 3),
        'expr_ADDOPGRP': RuleSize(4, 3),
        'expr_MULOPGRP1': RuleSize(4, 6),
        'expr_ADDOPGRP2': RuleSize(4, 6),
        'expr_DOUBLE': RuleSize(2, 1),
        'T__0': RuleSize(0, 0),
        'T__1': RuleSize(0, 0),
        'T__2': RuleSize(0, 0),
        'T__3': RuleSize(0, 0),
        'T__4': RuleSize(0, 0),
        'T__5': RuleSize(0, 0),
        'T__6': RuleSize(0, 0),
        'T__7': RuleSize(0, 0),
    }

    _alt_sizes = (
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 0
        (RuleSize(5, 3), RuleSize(5, 3), RuleSize(5, 6), RuleSize(5, 6), RuleSize(3, 1)),  # 1
        (RuleSize(1, 1), RuleSize(1, 1)),  # 2
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 3
        (RuleSize(1, 1), RuleSize(4, 3)),  # 4
    )

    _alt_conds = (
        (1, 1, 1, 1),  # 0
        (1, 1, 1, 1, 1),  # 1
        (1, 1),  # 2
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x31, 0x3a), )),  # 1
        Generator._charset(((0x30, 0x3a), )),  # 2
        Generator._charset(((0x9, 0xa), (0xa, 0xb), (0xd, 0xe), (0x20, 0x21), )),  # 3
    )
