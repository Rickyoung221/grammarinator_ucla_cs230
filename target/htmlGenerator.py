# Generated by Grammarinator 0.0.post373+g15c7e1c.d20241204

from math import inf
from grammarinator.runtime import *

class htmlGenerator(Generator):


    def html(self, parent=None):
        with UnparserRuleContext(self, 'html', parent) as rule:
            current = rule.current
            self._reserve(6, self.T__0, parent=current)
            self._reserve(1, self.main, parent=current)
            self.T__1(parent=current)
            return current

    def main(self, parent=None):
        with UnparserRuleContext(self, 'main', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[4], 5) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.htmlHead(parent=current)
            current = rule.current
            self.htmlBody(parent=current)
            return current

    def htmlHead(self, parent=None):
        with UnparserRuleContext(self, 'htmlHead', parent) as rule:
            current = rule.current
            self._reserve(4, self.T__2, parent=current)
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[5], 4) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.GLOBAL_STYLE(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, htmlGenerator._quant_sizes[5], 4) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.META(parent=current)
            current = rule.current
            with QuantifierContext(rule, 2, 0, 1, htmlGenerator._quant_sizes[5], 4) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.META(parent=current)
            current = rule.current
            with QuantifierContext(rule, 3, 0, 1, htmlGenerator._quant_sizes[5], 4) as quant3:
                while quant3():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.META(parent=current)
            current = rule.current
            with QuantifierContext(rule, 4, 0, 1, htmlGenerator._quant_sizes[5], 4) as quant4:
                while quant4():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.META(parent=current)
            current = rule.current
            self._reserve(3, self.T__3, parent=current)
            self._reserve(2, self.RANDOM_TEXT, parent=current)
            self._reserve(1, self.T__4, parent=current)
            self.T__5(parent=current)
            return current

    def htmlBody(self, parent=None):
        with UnparserRuleContext(self, 'htmlBody', parent) as rule:
            current = rule.current
            self._reserve(4, self.T__6, parent=current)
            self._reserve(1, self.mainWrapper, parent=current)
            self.T__7(parent=current)
            return current

    def mainWrapper(self, parent=None):
        with UnparserRuleContext(self, 'mainWrapper', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[6], 0, htmlGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(4, self.T__8, parent=current)
                    self._reserve(3, self.recursiveContent, parent=current)
                    self._reserve(2, self.recursiveContent, parent=current)
                    self._reserve(1, self.recursiveContent, parent=current)
                    with QuantifierContext(rule, 0, 0, inf, htmlGenerator._quant_sizes[6], 1) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.recursiveContent(parent=current)
                    current = rule.current
                    self.T__9(parent=current)
                elif choice0 == 1:
                    self._reserve(2, self.recursiveContent, parent=current)
                    self._reserve(1, self.recursiveContent, parent=current)
                    self.recursiveContent(parent=current)
                    with QuantifierContext(rule, 1, 0, inf, htmlGenerator._quant_sizes[6], 0) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.recursiveContent(parent=current)
                    current = rule.current
            current = rule.current
            return current

    def recursiveContent(self, parent=None):
        with UnparserRuleContext(self, 'recursiveContent', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[7], 0, htmlGenerator._alt_conds[5]) as alt0:
                current = rule.current
                [self.RANDOM_TEXT, self.divWrapper, self.sectionWrapper, self.headerWrapper, self.footerWrapper, self.divWrapper, self.sectionWrapper, self.headerWrapper, self.footerWrapper, self.divWrapper, self.sectionWrapper, self.headerWrapper, self.footerWrapper][alt0()](parent=current)
            current = rule.current
            return current

    def divWrapper(self, parent=None):
        with UnparserRuleContext(self, 'divWrapper', parent) as rule:
            current = rule.current
            self._reserve(3, self.T__10, parent=current)
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[5], 3) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.INLINE_STYLE(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, htmlGenerator._quant_sizes[5], 3) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.FLEX_CLASS(parent=current)
            current = rule.current
            self._reserve(2, self.CLOSE, parent=current)
            self._reserve(1, self.recursiveContent, parent=current)
            with QuantifierContext(rule, 2, 0, inf, htmlGenerator._quant_sizes[6], 1) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.recursiveContent(parent=current)
            current = rule.current
            self.T__11(parent=current)
            return current

    def sectionWrapper(self, parent=None):
        with UnparserRuleContext(self, 'sectionWrapper', parent) as rule:
            current = rule.current
            self._reserve(3, self.T__12, parent=current)
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[5], 3) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.INLINE_STYLE(parent=current)
            current = rule.current
            self._reserve(2, self.CLOSE, parent=current)
            self._reserve(1, self.recursiveContent, parent=current)
            with QuantifierContext(rule, 1, 0, inf, htmlGenerator._quant_sizes[6], 1) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.recursiveContent(parent=current)
            current = rule.current
            self.T__13(parent=current)
            return current

    def headerWrapper(self, parent=None):
        with UnparserRuleContext(self, 'headerWrapper', parent) as rule:
            current = rule.current
            self._reserve(3, self.T__14, parent=current)
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[5], 3) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.INLINE_STYLE(parent=current)
            current = rule.current
            self._reserve(2, self.CLOSE, parent=current)
            self._reserve(1, self.recursiveContent, parent=current)
            with QuantifierContext(rule, 1, 0, inf, htmlGenerator._quant_sizes[6], 1) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.recursiveContent(parent=current)
            current = rule.current
            self.T__15(parent=current)
            return current

    def footerWrapper(self, parent=None):
        with UnparserRuleContext(self, 'footerWrapper', parent) as rule:
            current = rule.current
            self._reserve(3, self.T__16, parent=current)
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[5], 3) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.INLINE_STYLE(parent=current)
            current = rule.current
            self._reserve(2, self.CLOSE, parent=current)
            self._reserve(1, self.recursiveContent, parent=current)
            with QuantifierContext(rule, 1, 0, inf, htmlGenerator._quant_sizes[6], 1) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.recursiveContent(parent=current)
            current = rule.current
            self.T__17(parent=current)
            return current

    def OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'OPEN', parent) as rule:
            current = rule.current
            current.src += '<'
            return current

    def CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'CLOSE', parent) as rule:
            current = rule.current
            current.src += '>'
            return current

    def OPEN_SLASH(self, parent=None):
        with UnlexerRuleContext(self, 'OPEN_SLASH', parent) as rule:
            current = rule.current
            current.src += '</'
            return current

    def SLASH_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'SLASH_CLOSE', parent) as rule:
            current = rule.current
            current.src += '/>'
            return current

    def EQUALS(self, parent=None):
        with UnlexerRuleContext(self, 'EQUALS', parent) as rule:
            current = rule.current
            current.src += '='
            return current

    def SCRIPT(self, parent=None):
        with UnlexerRuleContext(self, 'SCRIPT', parent) as rule:
            current = rule.current
            current.src += '<script>console.log("Inline script executed");</script>'
            return current

    def GLOBAL_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'GLOBAL_STYLE', parent) as rule:
            current = rule.current
            current.src += '<style>body {margin: 0; font-family: Arial, sans-serif;background-color: #f4f4f4;}</style>'
            return current

    def RANDOM_TEXT(self, parent=None):
        with UnlexerRuleContext(self, 'RANDOM_TEXT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, htmlGenerator._charsets[1])
            current.src += self._model.charset(current, 1, htmlGenerator._charsets[2])
            current.src += self._model.charset(current, 2, htmlGenerator._charsets[2])
            with QuantifierContext(rule, 0, 0, inf, htmlGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 3, htmlGenerator._charsets[2])
            current = rule.current
            return current

    def PX(self, parent=None):
        with UnlexerRuleContext(self, 'PX', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, htmlGenerator._charsets[3])
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 1, htmlGenerator._charsets[4])
            current = rule.current
            current.src += 'px'
            return current

    def DIM(self, parent=None):
        with UnlexerRuleContext(self, 'DIM', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[0], 0, htmlGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += self._model.charset(current, 0, htmlGenerator._charsets[3])
                    with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[0], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 1, htmlGenerator._charsets[4])
                    current = rule.current
                    current.src += '%'
                elif choice0 == 1:
                    self.PX(parent=current)
            current = rule.current
            return current

    def FLEX_CLASS(self, parent=None):
        with UnlexerRuleContext(self, 'FLEX_CLASS', parent) as rule:
            current = rule.current
            current.src += 'class="flex-container"'
            return current

    def META(self, parent=None):
        with UnlexerRuleContext(self, 'META', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[1], 0, htmlGenerator._alt_conds[1]) as alt0:
                current = rule.current
                current.src += ['<meta name="viewport" content="width=device-width, initial-scale=1.0">', '<meta name="description" content="This is a comprehensive example of an HTML head element.">', '<meta name="author" content="John Doe">', '<meta name="keywords" content="HTML, head, example, metadata, SEO">', '<meta http-equiv="X-UA-Compatible" content="IE=edge">', '<meta name="robots" content="index, follow">', '<meta property="og:title" content="Comprehensive Head Example">', '<meta property="og:description" content="A detailed example of a well-structured HTML head element.">', '<meta property="og:image" content="https://example.com/og-image.jpg">', '<meta property="og:url" content="https://example.com">', '<meta name="twitter:card" content="summary_large_image">', '<meta name="theme-color" content="#ffffff">'][alt0()]
            current = rule.current
            return current

    def INLINE_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'INLINE_STYLE', parent) as rule:
            current = rule.current
            current.src += 'style="'
            with QuantifierContext(rule, 0, 0, 1, htmlGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.WIDTH_STYLE(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, 1, htmlGenerator._quant_sizes[1], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.HEIGHT_STYLE(parent=current)
            current = rule.current
            with QuantifierContext(rule, 2, 0, 1, htmlGenerator._quant_sizes[1], 0) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.COLOR_STYLE(parent=current)
            current = rule.current
            with QuantifierContext(rule, 3, 0, 1, htmlGenerator._quant_sizes[1], 0) as quant3:
                while quant3():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.POSITION_STYLE(parent=current)
            current = rule.current
            with QuantifierContext(rule, 4, 0, 1, htmlGenerator._quant_sizes[2], 0) as quant4:
                while quant4():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.BORDDER_STYLE(parent=current)
            current = rule.current
            current.src += '"'
            return current

    def WIDTH_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'WIDTH_STYLE', parent) as rule:
            current = rule.current
            current.src += 'width: '
            self.DIM(parent=current)
            current.src += ';'
            return current

    def HEIGHT_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'HEIGHT_STYLE', parent) as rule:
            current = rule.current
            current.src += 'height: '
            self.DIM(parent=current)
            current.src += ';'
            return current

    def COLOR(self, parent=None):
        with UnlexerRuleContext(self, 'COLOR', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[2], 0, htmlGenerator._alt_conds[2]) as alt0:
                current = rule.current
                current.src += ['red', 'blue', 'green', 'yellow', 'black'][alt0()]
            current = rule.current
            return current

    def COLOR_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'COLOR_STYLE', parent) as rule:
            current = rule.current
            current.src += 'color:'
            self.COLOR(parent=current)
            current.src += ';'
            return current

    def POSITION(self, parent=None):
        with UnlexerRuleContext(self, 'POSITION', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[2], 0, htmlGenerator._alt_conds[2]) as alt0:
                current = rule.current
                current.src += ['static', 'relative', 'absolute', 'fixed', 'sticky'][alt0()]
            current = rule.current
            return current

    def POS_DISTANCE_TYPE(self, parent=None):
        with UnlexerRuleContext(self, 'POS_DISTANCE_TYPE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[3], 0, htmlGenerator._alt_conds[3]) as alt0:
                current = rule.current
                current.src += ['top', 'left', 'right', 'bottom'][alt0()]
            current = rule.current
            return current

    def POS_DISTANCE(self, parent=None):
        with UnlexerRuleContext(self, 'POS_DISTANCE', parent) as rule:
            current = rule.current
            self._reserve(1, self.POS_DISTANCE_TYPE, parent=current)
            current.src += ':'
            self.PX(parent=current)
            current.src += ';'
            return current

    def POSITION_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'POSITION_STYLE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[4], 0, htmlGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += 'position:'
                    self.POSITION(parent=current)
                    current.src += ';'
                    with QuantifierContext(rule, 0, 0, inf, htmlGenerator._quant_sizes[3], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.POS_DISTANCE(parent=current)
                    current = rule.current
                elif choice0 == 1:
                    self.POS_DISTANCE(parent=current)
                    with QuantifierContext(rule, 1, 0, 1, htmlGenerator._quant_sizes[3], 0) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.POS_DISTANCE(parent=current)
                    current = rule.current
                    with QuantifierContext(rule, 2, 0, 1, htmlGenerator._quant_sizes[3], 0) as quant2:
                        while quant2():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.POS_DISTANCE(parent=current)
                    current = rule.current
                    with QuantifierContext(rule, 3, 0, 1, htmlGenerator._quant_sizes[3], 0) as quant3:
                        while quant3():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.POS_DISTANCE(parent=current)
                    current = rule.current
            current = rule.current
            return current

    def BORDER_TYPE(self, parent=None):
        with UnlexerRuleContext(self, 'BORDER_TYPE', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, htmlGenerator._alt_sizes[5], 0, htmlGenerator._alt_conds[4]) as alt0:
                current = rule.current
                current.src += ['solid', 'dotted', 'dashed'][alt0()]
            current = rule.current
            return current

    def BORDER_RADIUS(self, parent=None):
        with UnlexerRuleContext(self, 'BORDER_RADIUS', parent) as rule:
            current = rule.current
            current.src += 'border-radius: '
            current.src += self._model.charset(current, 0, htmlGenerator._charsets[4])
            current.src += 'px;'
            return current

    def BORDDER_STYLE(self, parent=None):
        with UnlexerRuleContext(self, 'BORDDER_STYLE', parent) as rule:
            current = rule.current
            current.src += 'border: '
            current.src += self._model.charset(current, 0, htmlGenerator._charsets[3])
            current.src += 'px '
            self._reserve(2, self.BORDER_TYPE, parent=current)
            current.src += ' '
            self._reserve(1, self.COLOR, parent=current)
            current.src += ';'
            self.BORDER_RADIUS(parent=current)
            return current

    def T__0(self, parent=None):
        with UnlexerRuleContext(self, 'T__0', parent) as rule:
            current = rule.current
            current.src += '<!DOCTYPE html> <html lang="en">'
            return current

    def T__1(self, parent=None):
        with UnlexerRuleContext(self, 'T__1', parent) as rule:
            current = rule.current
            current.src += '</html>'
            return current

    def T__2(self, parent=None):
        with UnlexerRuleContext(self, 'T__2', parent) as rule:
            current = rule.current
            current.src += '<head>'
            return current

    def T__3(self, parent=None):
        with UnlexerRuleContext(self, 'T__3', parent) as rule:
            current = rule.current
            current.src += '<title>'
            return current

    def T__4(self, parent=None):
        with UnlexerRuleContext(self, 'T__4', parent) as rule:
            current = rule.current
            current.src += '</title>'
            return current

    def T__5(self, parent=None):
        with UnlexerRuleContext(self, 'T__5', parent) as rule:
            current = rule.current
            current.src += '</head>'
            return current

    def T__6(self, parent=None):
        with UnlexerRuleContext(self, 'T__6', parent) as rule:
            current = rule.current
            current.src += '<body>'
            return current

    def T__7(self, parent=None):
        with UnlexerRuleContext(self, 'T__7', parent) as rule:
            current = rule.current
            current.src += '</body>'
            return current

    def T__8(self, parent=None):
        with UnlexerRuleContext(self, 'T__8', parent) as rule:
            current = rule.current
            current.src += '<main>'
            return current

    def T__9(self, parent=None):
        with UnlexerRuleContext(self, 'T__9', parent) as rule:
            current = rule.current
            current.src += '</main>'
            return current

    def T__10(self, parent=None):
        with UnlexerRuleContext(self, 'T__10', parent) as rule:
            current = rule.current
            current.src += '<div '
            return current

    def T__11(self, parent=None):
        with UnlexerRuleContext(self, 'T__11', parent) as rule:
            current = rule.current
            current.src += '</div>'
            return current

    def T__12(self, parent=None):
        with UnlexerRuleContext(self, 'T__12', parent) as rule:
            current = rule.current
            current.src += '<section '
            return current

    def T__13(self, parent=None):
        with UnlexerRuleContext(self, 'T__13', parent) as rule:
            current = rule.current
            current.src += '</section>'
            return current

    def T__14(self, parent=None):
        with UnlexerRuleContext(self, 'T__14', parent) as rule:
            current = rule.current
            current.src += '<header '
            return current

    def T__15(self, parent=None):
        with UnlexerRuleContext(self, 'T__15', parent) as rule:
            current = rule.current
            current.src += '</header>'
            return current

    def T__16(self, parent=None):
        with UnlexerRuleContext(self, 'T__16', parent) as rule:
            current = rule.current
            current.src += '<footer '
            return current

    def T__17(self, parent=None):
        with UnlexerRuleContext(self, 'T__17', parent) as rule:
            current = rule.current
            current.src += '</footer>'
            return current


    _default_rule = html

    _immutable_rules = ('CLOSE', 'EQUALS', 'FLEX_CLASS', 'GLOBAL_STYLE', 'OPEN', 'OPEN_SLASH', 'SCRIPT', 'SLASH_CLOSE', 'T__0', 'T__1', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16', 'T__17', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 'T__9')

    _rule_sizes = {
        'html': RuleSize(5, 7),
        'main': RuleSize(4, 5),
        'htmlHead': RuleSize(1, 5),
        'htmlBody': RuleSize(3, 5),
        'mainWrapper': RuleSize(2, 3),
        'recursiveContent': RuleSize(1, 1),
        'divWrapper': RuleSize(2, 4),
        'sectionWrapper': RuleSize(2, 4),
        'headerWrapper': RuleSize(2, 4),
        'footerWrapper': RuleSize(2, 4),
        'OPEN': RuleSize(0, 0),
        'CLOSE': RuleSize(0, 0),
        'OPEN_SLASH': RuleSize(0, 0),
        'SLASH_CLOSE': RuleSize(0, 0),
        'EQUALS': RuleSize(0, 0),
        'SCRIPT': RuleSize(0, 0),
        'GLOBAL_STYLE': RuleSize(0, 0),
        'RANDOM_TEXT': RuleSize(0, 0),
        'PX': RuleSize(0, 0),
        'DIM': RuleSize(0, 0),
        'FLEX_CLASS': RuleSize(0, 0),
        'META': RuleSize(0, 0),
        'INLINE_STYLE': RuleSize(0, 0),
        'WIDTH_STYLE': RuleSize(1, 1),
        'HEIGHT_STYLE': RuleSize(1, 1),
        'COLOR': RuleSize(0, 0),
        'COLOR_STYLE': RuleSize(1, 1),
        'POSITION': RuleSize(0, 0),
        'POS_DISTANCE_TYPE': RuleSize(0, 0),
        'POS_DISTANCE': RuleSize(1, 2),
        'POSITION_STYLE': RuleSize(1, 1),
        'BORDER_TYPE': RuleSize(0, 0),
        'BORDER_RADIUS': RuleSize(0, 0),
        'BORDDER_STYLE': RuleSize(1, 3),
        'T__0': RuleSize(0, 0),
        'T__1': RuleSize(0, 0),
        'T__2': RuleSize(0, 0),
        'T__3': RuleSize(0, 0),
        'T__4': RuleSize(0, 0),
        'T__5': RuleSize(0, 0),
        'T__6': RuleSize(0, 0),
        'T__7': RuleSize(0, 0),
        'T__8': RuleSize(0, 0),
        'T__9': RuleSize(0, 0),
        'T__10': RuleSize(0, 0),
        'T__11': RuleSize(0, 0),
        'T__12': RuleSize(0, 0),
        'T__13': RuleSize(0, 0),
        'T__14': RuleSize(0, 0),
        'T__15': RuleSize(0, 0),
        'T__16': RuleSize(0, 0),
        'T__17': RuleSize(0, 0),
    }

    _alt_sizes = (
        (RuleSize(0, 0), RuleSize(1, 1)),  # 0
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 1
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 2
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 3
        (RuleSize(1, 1), RuleSize(2, 3)),  # 4
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 5
        (RuleSize(2, 5), RuleSize(2, 3)),  # 6
        (RuleSize(1, 1), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4), RuleSize(3, 4)),  # 7
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 1
        (1, 1, 1, 1, 1),  # 2
        (1, 1, 1, 1),  # 3
        (1, 1, 1),  # 4
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 5
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(2, 2),  # 1
        RuleSize(2, 4),  # 2
        RuleSize(2, 3),  # 3
        RuleSize(2, 5),  # 4
        RuleSize(1, 1),  # 5
        RuleSize(2, 1),  # 6
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x41, 0x5b), (0x61, 0x7b), )),  # 1
        Generator._charset(((0x30, 0x3a), (0x41, 0x5b), (0x61, 0x7b), )),  # 2
        Generator._charset(((0x31, 0x3a), )),  # 3
        Generator._charset(((0x30, 0x3a), )),  # 4
    )
